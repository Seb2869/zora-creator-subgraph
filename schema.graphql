type TransactionInfo @entity {
  id: ID!
  block: BigInt!
  timestamp: BigInt!
}

type SalesConfig @entity(immutable: true) {
  id: ID!

  publicSalePrice: BigInt!
  maxSalePurchasePerAddress: BigInt!
  publicSaleStart: BigInt!
  publicSaleEnd: BigInt!
  presaleStart: BigInt!
  presaleEnd: BigInt!
  presaleMerkleRoot: Bytes!

  drop: ERC721Drop!
}

type ContractConfig @entity {
  id: ID!

  metadataRenderer: Bytes!
  editionSize: BigInt!
  royaltyBPS: Int!
  fundsRecipient: Bytes!

  drop: ERC721Drop!
}

type ERC721Drop @entity {
  id: ID!

  created: TransactionInfo!

  creator: Bytes!
  address: Bytes!
  name: String!
  symbol: String!

  contractConfig: ContractConfig!
  salesConfigId: BigInt!

  salesConfig: SalesConfig!
  salesConfigHistory: [SalesConfig!]! @derivedFrom(field: "drop")

  sales: [NFTEditionSale!]! @derivedFrom(field: "drop")

  transfers: [NFTEditionTransfer!]! @derivedFrom(field: "drop")

  totalMinted: BigInt!
  maxSupply: BigInt!

  txn: TransactionInfo!
}

type NFTEditionSale @entity {
  id: ID!
  pricePerToken: BigInt!
  priceTotal: BigInt!
  count: BigInt!
  purchaser: Bytes!
  firstPurchasedTokenId: Int!
  txn: TransactionInfo!
  drop: ERC721Drop!
}

type NFTEditionTransfer @entity {
  id: ID!

  tokenId: BigInt!
  to: Bytes! # from address for transfer
  from: Bytes! # to address for transfer
  txn: TransactionInfo!

  drop: ERC721Drop!
}